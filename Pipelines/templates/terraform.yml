parameters:
  env: ''
  subscription: ''
  terraformsa: ''
  terraformrg: ''
  storagecontainer: ''
  terraformurl: ''
  tenantid: ''
  applicationid: ''
  spclientsecret: ''
  subscriptionid: ''

jobs:
- deployment: ${{ parameters.env }}_tf_deployment
  environment: TerraformDeployment_${{ parameters.env }}
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    storageaccesskey: ''
    runapply: false
  strategy:
    runOnce:
      deploy:   
        steps:
        - task: AzureCLI@1
          name: remotestate
          displayName: 'Create resources for remote state'
          inputs:
            azureSubscription: ${{ parameters.subscription }} 
            scriptLocation: inlineScript
            inlineScript: |
              echo ${{ parameters.terraformsa }}
              key=$(az storage account keys list --account-name ${{ parameters.terraformsa }} --resource-group ${{parameters.terraformrg}}  --query "[0].value")
              echo "##vso[task.setvariable variable=storageaccesskey;issecret=true;isOutput=true]${key:1:-1}"
              echo "##vso[task.setvariable variable=storageaccesskey;issecret=true]${key:1:-1}"
        
        - bash: |
            echo Downloading Terraform
            mkdir $(System.DefaultWorkingDirectory)/tmp
            cd $(System.DefaultWorkingDirectory)/tmp
            wget $TERRAFORMURL --output-document terraform.zip
            unzip terraform.zip
            mv terraform $(Build.ArtifactStagingDirectory)/bin
          displayName: Download Terraform
          env:
            TERRAFORMURL: ${{parameters.terraformurl}}

        - bash: |
            echo Creating backend.tfvars
            touch backend.tfvars
            echo 'storage_account_name = "'$TFSA'"' >> backend.tfvars
            echo 'container_name = "'$CONTAINER'"' >> backend.tfvars
            echo 'key = "'$ENVIRONMENT'.terraform.tfstate"' >> backend.tfvars
            cat backend.tfvars
          workingDirectory: '$(Pipeline.Workspace)/Terraform'
          displayName: Creating backend.tfvars
          env: 
            TFSA: ${{parameters.terraformsa}}
            ENVIRONMENT: ${{parameters.env}}
            CONTAINER: ${{parameters.storagecontainer}}

        - bash: |
            echo Terraform Init
            terraform init -backend-config=backend.tfvars -backend-config="access_key=$(storageaccesskey)" -input=false
            echo Terraform Validate
            terraform validate
            echo Terraform Plan 
            tfapply=false
            terraform plan -var-file="terraform.${{parameters.env}}.tfvars" -out=planreview -input=false 2>&1 -detailed-exitcode > /dev/null
            OUT=$?
            if [ $OUT -eq 0 ];then
                echo '##vso[task.setvariable variable=terraform_plan_exitcode]0'
                echo "No changes. Infrastructure is up-to-date!"
            elif [ $OUT -eq 1 ];then
                echo '##vso[task.setvariable variable=terraform_plan_exitcode]1'
                echo "Terraform plan has failed with exitcode 1"
                exit 1
            elif [ $OUT -eq 2 ];then
                echo '##vso[task.setvariable variable=terraform_plan_exitcode]2'
                echo "Changes have been noticed!"
                terraform show planreview
                tfapply=true
                echo "##vso[task.setvariable variable=runapply]True"
                echo $(runapply)
            else
                echo "Terraform plan has failed!"
                exit 1
            fi        
          workingDirectory: '$(Pipeline.Workspace)/Terraform'
          displayName: Terraform Init & Plan
          name: initplan
          env:
            TF_IN_AUTOMATION: true
            ARM_CLIENT_ID: ${{parameters.applicationid }}
            ARM_CLIENT_SECRET: ${{parameters.spclientsecret}}
            ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionid}}
            ARM_TENANT_ID: ${{parameters.tenantid}}
            ARM_SKIP_PROVIDER_REGISTRATION: true

        - bash: |

            echo Terraform Apply 
            terraform apply planreview
          
          workingDirectory: '$(Pipeline.Workspace)/Terraform'
          displayName: 'Terraform Apply'
          env:
            TF_IN_AUTOMATION: true
            ARM_CLIENT_ID: ${{parameters.applicationid }}
            ARM_CLIENT_SECRET: ${{parameters.spclientsecret}}
            ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionid}}
            ARM_TENANT_ID: ${{parameters.tenantid}}
                  


